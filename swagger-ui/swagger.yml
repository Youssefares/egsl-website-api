openapi: 3.0.1
servers:
  - url: http://localhost:3000/
    description: Development server
info:
  description: >-
    The specification for the Egyptian Sign Language website backend API.
  version: 1.0.0
  title: EgSL API
tags:
  - name: User Account and Session
    description: Sign in, sign up, sign out, delete account, update account info, view profile.
  - name: Password
    description: Request password reset email, get password reset token, reset password.
  - name: Root
    description: Get API root for testing and development.
  - name: Gestures and Reviews
    description: Index unreviewed gestures, review pending gesture, gesture creation
  - name: Words
    description: Create a word, destroy a word, show a word, index words.
  - name: Categories
    description: Create a category, destroy a category, show a category, index categories.
  - name: Users
    description: Show current user, show current user's contributions

paths:
  /gestures/unreviewed/:
    get:
      security:
        - access-token: []
        - client: []
        - uid: []
      tags:
        - Gestures and Reviews
      operationId: index-unreviewed-gestures
      summary: index-unreviewed-gestures
      parameters:
        - in: query
          name: page
          schema:
            type: int
          required: false
          default: 1
          description: page number (defaults to 1)
        - in: query
          name: per_page
          schema:
            type: int
          required: false
          default: 5
          description: number of gestures per page (defaults to 5)
      responses:
        '200':
          description: >-
            returns at most 5 gesture records along with pagination-related metadata.
          content:
            application/json:
              example:
                {
                  "data": [
                    {
                      "id": "1",
                      "type": "gesture",
                      "attributes": {
                        "created_at": "2019-04-11T22:16:06.207Z",
                        "video_url": "url/to/video.mp4",
                        "preview_url": "url/to/preview."
                      },
                      "relationships": {
                        "user": {
                          "data": {
                            "id": "4",
                            "type": "user"
                          }
                        },
                        "word": {
                          "data": {
                            "id": "4",
                            "type": "word"
                          }
                        }
                      }
                    }
                  ],
                  "included": [
                    {
                      "id": "4",
                      "type": "user",
                      "attributes": {
                        "first_name": "Tarek",
                        "last_name": "Alqady",
                        "uid": "tarek@egsl.com",
                        "email": "tarek@egsl.com",
                        "city": "Alexandria",
                        "country": "Egypt",
                        "date_of_birth": "1996-03-18",
                        "gender": "male",
                        "bio": null,
                        "image": null
                      }
                    },
                    {
                      "id": "4",
                      "type": "word",
                      "attributes": {
                        "name": "أحمر",
                        "part_of_speech": "اسم"
                      },
                      "relationships": {
                        "categories": {
                          "data": [
                            {
                              "id": "5",
                              "type": "category"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "id": "5",
                      "type": "category",
                      "attributes": {
                        "name": "ألوان"
                      },
                      "relationships": {}
                    }
                  ],
                  "page_meta": {
                    "total_count": 1,
                    "total_pages": 1
                  }
                }
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                {
                  "error": "You do not have permission to access this endpoint."
                }
        '401':
          description: Unauthorized.
          content:
            application/json:
              example:
                {
                  "errors": [
                    "You need to sign in or sign up before continuing."
                  ]
                }
  /gestures/:
    post:
      security:
        - access-token: []
        - client: []
        - uid: []
      tags:
        - Gestures and Reviews
      operationId: create-gesture
      summary: create-gesture
      requestBody:
        description: >-
          Contains the string of the word to create the gesture for
          and the gesture video to be uploaded to create gesture record.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                word:
                  type: string
                video:
                  type: string
                  format: binary
              example:
                word: أحمر
                video: أحمر.mp4
      responses:
        '200':
          description: uploads video and returns gesture data.
          content:
            application/json:
              example:
                {
                  "data": {
                    "id": "3",
                    "type": "gesture",
                    "attributes": {
                      "video_url": "url/to/video.mp4"
                    },
                    "relationships": {
                      "user": {
                        "data": {
                          "id": "1",
                          "type": "user"
                        }
                      },
                      "word": {
                        "data": {
                          "id": "3",
                          "type": "word"
                        }
                      }
                    }
                  }
                }
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                {
                  "error": "You do not have permission to access this endpoint."
                }
        '401':
          description: Unauthorized.
          content:
            application/json:
              example:
                {
                  "errors": [
                    "You need to sign in or sign up before continuing."
                  ]
                }
        '404':
          description: Word record not found
          content:
            application/json:
              example:
                {
                  "errors": {
                    "word": [
                      "Record not found"
                    ]
                  }
                }

  /gestures/{id}/review/:
    post:
      security:
        - access-token: []
        - client: []
        - uid: []
      tags:
        - Gestures and Reviews
      operationId: review-gesture
      summary: review-gesture
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            minimum: 1
          required: true
          description: the id of the gesture to be reviewed.
      requestBody:
        description: contains review result
        content:
          application/json:
            schema:
              example:
                {
                  "accepted": false,
                  "comment": "Bad lighting"
                }
      responses:
        '201':
          description: reviews gesture and returns review object
          content:
            application/json:
              example:
                {
                  "data": {
                    "id": "2",
                    "type": "review",
                    "attributes": {
                      "accepted": true,
                      "comment": null
                    },
                    "relationships": {
                      "reviewer": {
                        "data": {
                          "id": "1",
                          "type": "reviewer"
                        }
                      },
                      "gesture": {
                        "data": {
                          "id": "4",
                          "type": "gesture"
                        }
                      }
                    }
                  }
                }
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                {
                  "error": "You do not have permission to access this endpoint."
                }
        '401':
          description: Unauthorized.
          content:
            application/json:
              example:
                {
                  "errors": [
                    "You need to sign in or sign up before continuing."
                  ]
                }
        '404':
          description: Record not found or already reviewed
          content:
            application/json:
              example:
                {
                  "errors": {
                    "gesture_id": [
                      "Record not found or already reviewed"
                    ]
                  }
                }
        '422':
          description: Unprocessable entity
          content:
            application/json:
              example:
                {
                  "comment": [
                    "can't be blank when accepted is false"
                  ]
                }

  /:
    get:
      security:
        - access-token: []
        - client: []
        - uid: []
      tags:
        - Root
      operationId: root
      summary: root
      responses:
        '200':
          description: returns "Hello"
          content:
            application/json:
              example:
                "Hello"
        '401':
          description: Unauthorized.
          content:
            application/json:
              example:
                {
                  "errors": [
                    "You need to sign in or sign up before continuing."
                  ]
                }
  /auth/:
    post:
      tags:
        - User Account and Session
      operationId: sign-up
      summary: sign-up
      requestBody:
        description: Contains the data for the user to be created.
        content:
          application/json:
            schema:
              example:
                email: youssefares@egsl.com
                password: password
                first_name: youssef
                last_name: fares
                image: someplace
                gender: male
                city: Cairo
                country: Egypt
                date_of_birth: 20/03/1996
                password_confirmation: password
                confirm_success_url: http://localhost:3000/
      responses:
        '422':
          description: Returns errors with the User data specified
          content:
            application/json:
              example:
                {
                  "status": "error",
                  "data": {
                    "id": null,
                    "provider": "email",
                    "uid": "",
                    "allow_password_change": false,
                    "first_name": "youssef",
                    "last_name": "fares",
                    "city": "Cairo",
                    "country": "Egypt",
                    "date_of_birth": "1996-03-20",
                    "email": "youssefares@egsl.com",
                    "gender": "male",
                    "image": "someplace",
                    "bio": null,
                    "is_reviewer": false,
                    "created_at": null,
                    "updated_at": null,
                    "type": "User"
                  },
                  "errors": {
                    "email": [
                      "has already been taken",
                      "has already been taken"
                    ],
                    "full_messages": [
                      "Email has already been taken",
                      "Email has already been taken"
                    ]
                  }
                }
        '200':
          description: Returns a user object inside "data" and sends confirmation email to email specified.
          content:
            application/json:
              example:
                {
                  "status": "success",
                  "data": {
                    "id": "3",
                    "type": "user",
                    "attributes": {
                      "first_name": "Yara",
                      "last_name": "Abdullatif",
                      "uid": "yara@egsl.com",
                      "email": "yara@egsl.com",
                      "city": "Alex",
                      "country": "Egypt",
                      "type": "Reviewer",
                      "date_of_birth": "1996-03-18",
                      "gender": "female",
                      "bio": null,
                      "image": null,
                      "created_at": "2019-05-11T00:07:24.952Z"
                    }
                  }
                }
    put:
      security:
        - access-token: []
        - client: []
        - uid: []
      tags:
        - User Account and Session
      operationId: update-account
      summary: update-account
      requestBody:
        description: >-
          Contains user fields to be updated.
          User can update password, but has to provide current_password, password and
          password_confirmation fields as inputs in request body.
          User email can also be editted. (FIXME:Is this a good idea?)
        content:
          application/json:
            schema:
              example:
                first_name: editted_youssef
                last_name: editted_fares
                image: editted_someplace
                gender: male
                city: Cairo
                bio: This is my new editted bio.
                country: Egypt
                date_of_birth: 20/03/1996
      responses:
        '404':
          description: User not found
          content:
            application/json:
              example:
                {
                  "success": false,
                  "errors": [
                    "User not found."
                  ],
                  "status": "error"
                }
        '422':
          description: >-
            Returns errors with the User data specified.
          content:
            application/json:
              example:
                {
                  "status": "error",
                  "errors": {
                    "first_name": [
                      "can't be blank"
                    ],
                    "full_messages": [
                      "First name can't be blank"
                    ]
                  }
                }
        '200':
          description: Returns the updated user object inside "data"
          content:
            application/json:
              example:
                {
                  "status": "success",
                  "data": {
                    "id": "3",
                    "type": "user",
                    "attributes": {
                      "first_name": "Yara",
                      "last_name": "Abdullatif",
                      "uid": "yara@egsl.com",
                      "email": "yara@egsl.com",
                      "city": "Alex",
                      "country": "Egypt",
                      "type": "Reviewer",
                      "date_of_birth": "1996-03-18",
                      "gender": "female",
                      "bio": null,
                      "image": null,
                      "created_at": "2019-05-11T00:07:24.952Z"
                    }
                  }
                }
    delete:
      security:
        - access-token: []
        - client: []
        - uid: []
      tags:
        - User Account and Session
      operationId: delete-account
      summary: delete-account
      responses:
        '200':
          description: Successfully deleted user
          content:
            application/json:
              example:
                {
                  "status": "success",
                  "message": "Account with UID 'yousseffares@egsl.com' has been destroyed."
                }
        '404':
          description: User not found
          content:
            application/json:
              example:
                {
                  "success": false,
                  "errors": [
                    "Unable to locate account for destruction."
                  ],
                  "status": "error"
                }
  /auth/sign_in/:
    post:
      tags:
        - User Account and Session
      operationId: sign-in
      summary: sign-in
      requestBody:
        description: Contains user email and password
        content:
          application/json:
            schema:
              example:
                {
                  "email": "youssefares@egsl.com",
                  "password": "password"
                }
      responses:
        '401':
          description: Unauthorized (Wrong credentials or unconfirmed email)
          content:
            application/json:
              example:
                {
                  "success": false,
                  "errors": [
                    "Invalid login credentials. Please try again."
                  ]
                }
        '200':
          description: >-
            Returns a user object inside "data" and token information (to be sent in 
            the headers of further requests where authentication is required) in
            headers.
          headers:
            access-token:
              schema:
                type: string
              description: Access token string
            client:
              schema:
                type: string
              description: Info about api client
            uid:
              schema:
                type: string
              description: User identifier (email or omniauth token)
          content:
            application/json:
              example:
                {
                  "status": "success",
                  "data": {
                    "id": "3",
                    "type": "user",
                    "attributes": {
                      "first_name": "Yara",
                      "last_name": "Abdullatif",
                      "uid": "yara@egsl.com",
                      "email": "yara@egsl.com",
                      "city": "Alex",
                      "country": "Egypt",
                      "type": "Reviewer",
                      "date_of_birth": "1996-03-18",
                      "gender": "female",
                      "bio": null,
                      "image": null,
                      "created_at": "2019-05-11T00:07:24.952Z"
                    }
                  }
                }
  /auth/validate_token:
    get:
      security:
        - security:
        - access-token: []
        - client: []
        - uid: []
      tags:
        - User Account and Session
      operationId: validate-token
      summary: validate-token (can be used as to view profile)
      responses:
        '200':
          description: Valid authentication headers
          content:
            application/json:
              example:
                {
                  "status": "success",
                  "data": {
                    "id": "3",
                    "type": "user",
                    "attributes": {
                      "first_name": "Yara",
                      "last_name": "Abdullatif",
                      "uid": "yara@egsl.com",
                      "email": "yara@egsl.com",
                      "city": "Alex",
                      "country": "Egypt",
                      "type": "Reviewer",
                      "date_of_birth": "1996-03-18",
                      "gender": "female",
                      "bio": null,
                      "image": null,
                      "created_at": "2019-05-11T00:07:24.952Z"
                    }
                  }
                }
        '401':
          description: Invalid authentication headers
          content:
            application/json:
              example:
                {
                  "success": false,
                  "errors": [
                    "Invalid login credentials"
                  ]
                }
  /auth/sign_out:
    delete:
      security:
        - access-token: []
        - client: []
        - uid: []
      tags:
        - User Account and Session
      operationId: sign-out
      summary: sign-out
      responses:
        '200':
          description: Successfully signed out user
          content:
            application/json:
              example:
                {
                  "status": "success",
                }
        '404':
          description: User not found
          content:
            application/json:
              example:
                {
                  "success": false,
                  "errors": [
                    "User was not found or was not logged in."
                  ]
                }
  /auth/password/:
    post:
      tags:
        - Password
      operationId: request-password-reset
      summary: request-password-reset
      requestBody:
        description: Contains user email and url to send the user to, to complete password reset.
        content:
          application/json:
            schema:
              example:
                {
                  "email": "youssefares@egsl.com",
                  "redirect_url": "http://localhost:3000/"
                }
      responses:
        '401':
          description: Email not provided.
          content:
            application/json:
              example:
                {
                  "success": false,
                  "errors": [
                    "You must provide an email address."
                  ]
                }
        '200':
          description: Email sent
          content:
            application/json:
              example:
                {
                  "success": true,
                  "message": "An email has been sent to 'newemail@egsl.com' containing instructions for resetting your password."
                }
        '404':
          description: User not found
          content:
            application/json:
              example:
                {
                  "success": false,
                  "errors": [
                    "Unable to find user with email 'newemail@egssddl.com'."
                  ]
                }
    put:
      tags:
        - Password
      operationId: password-reset
      summary: password-reset
      description: >-
        Note that this is another way to edit user password. The first was PUT /auth/ which
        requires you to know the former password. This endpoint however requires the correct
        authentication headers only, with access-token = a password reset token which is
        sent in the password reset email as part of the redirect link. 
        Optionally you can use this endpoint to reset password by knowing your 
        current_password as well.
        You may only use your password reset token once to reset your password.
      security:
        - access-token: []
        - client: []
        - uid: []
      parameters:
        - in: query
          name: password
          schema:
            type: string
          required: true
          description: new password
        - in: query
          name: password_confirmation
          schema:
            type: string
          required: true
          description: new password confirmation
        - in: query
          name: current_password
          schema:
            type: string
          description: >-
            user current password (not required when using password reset token as access token)
      responses:
        '401':
          description: Unauthorized (invalid authentication headers)
          content:
            application/json:
              example:
                {
                  "success": false,
                  "errors": [
                    "Unauthorized"
                  ]
                }
        '422':
          description: Wrong current_password or invalid fields password or password_confirmation.
          content:
            application/json:
              example:
                {
                  "success": false,
                  "errors": {
                    "password_confirmation": [
                      "doesn't match Password"
                    ],
                    "current_password": [
                      "is invalid"
                    ],
                    "full_messages": [
                      "Password confirmation doesn't match Password",
                      "Current password is invalid"
                    ]
                  }
                }
        '200':
          description: Password changed
          content:
            application/json:
              example:
                {
                  "status": "success",
                  "data": {
                    "id": "3",
                    "type": "user",
                    "attributes": {
                      "first_name": "Yara",
                      "last_name": "Abdullatif",
                      "uid": "yara@egsl.com",
                      "email": "yara@egsl.com",
                      "city": "Alex",
                      "country": "Egypt",
                      "type": "Reviewer",
                      "date_of_birth": "1996-03-18",
                      "gender": "female",
                      "bio": null,
                      "image": null,
                      "created_at": "2019-05-11T00:07:24.952Z"
                    }
                  },
                  "message": "Your password has been successfully updated."
                }
  /auth/password/edit:
    description: This endpoint is usually hit only by clicking on the link in the password reset email.
    get:
      tags:
        - Password
      operationId: get-password-reset-token
      summary: get-password-reset-token
      parameters:
        - in: query
          name: redirect_url
          schema:
            type: string
          required: true
          description: >-
            Should point to a form where the user can fill password and password_confirmation fields. 
        - in: query
          name: reset_password_token
          schema:
            type: string
          required: true
      responses:
        '200':
          description: >-
            The user is redirected successfully to redirect_url specified when the
            password reset request was made (POST /auth/password/). The response
            will be that of the redirect_url.
            The response headers will contain the authentication headers for which
            access-token will equal the one-time password-reset token.
          headers:
            access-token:
              schema:
                type: string
              description: Access token string
            client:
              schema:
                type: string
              description: Info about api client
            uid:
              schema:
                type: string
              description: User identifier (email or omniauth token)
        '404':
          description: Invalid (or alread used once) password_reset_token
          content:
            application/json:
              example:
                {
                  "status": 404,
                  "error": "Not Found"
                }
  /categories/:
    post:
      security:
        - access-token: []
        - client: []
        - uid: []
      tags:
        - Categories
      operationId: create-category
      summary: create-category
      requestBody:
        description: Contains category's name, optional parent and/or children categories
        required: true
        content:
          application/json:
            schema:
              example:
                {
                  "name": "طيور",
                  "parent": "حيوانات"
                }
      responses:
        '200':
          description: Category created successfully. Returns the created category.
          content:
            application/json:
              example:
               {
                "data": {
                  "id": "10",
                  "type": "category",
                  "attributes": {
                    "name": "طيور"
                  },
                  "relationships": {}
                }
              }
        '422':
          description: Name is invalid (e.g. used or empty). Returns the errors.
          content:
            application/json:
              example:
                {
                  "name": [
                    "has already been taken"
                  ]
                }
        '401':
          description: Unauthorized.
          content:
            application/json:
              example:
                {
                  "errors": [
                    "You need to sign in or sign up before continuing."
                  ]
                }
        '403':
          description: Forbidden.
          content:
            application/json:
              example:
                {
                  "error": "You do not have permission to access this endpoint."
                }
    get:
      tags:
        - Categories
      operationId: index-categories
      summary: index-categories
      responses:
        '200':
          description: Returns all available categories.
          content:
            application/json:
              example:
                {
                  "data": [
                    {
                      "id": "2",
                      "type": "category",
                      "attributes": {
                        "name": "اﻷسرة"
                      },
                      "relationships": {}
                    },
                    {
                      "id": "3",
                      "type": "category",
                      "attributes": {
                        "name": "أُخرى"
                      },
                      "relationships": {}
                    },
                    {
                      "id": "4",
                      "type": "category",
                      "attributes": {
                        "name": "أيام"
                      },
                      "relationships": {}
                    }
                  ]
                }
  /categories/{category}/:
    get:
      tags:
        - Categories
      operationId: show-category
      summary: show-category
      parameters:
        - in: path
          name: category
          schema:
            type: string
          required: true
          description: category name string
      responses:
        '200':
          description: Returns the category with the given id.
          content:
            application/json:
              example:
                {
                  "data": {
                    "id": "5",
                    "type": "category",
                    "attributes": {
                      "name": "ألوان"
                    },
                    "relationships": {}
                  }
                }
        '404':
          description: Category not found.
          content:
            application/json:
              example:
                {
                  "errors": {
                    "category": [
                      "Record not found"
                    ]
                  }
                }
  /categories/{id}/:
    delete:
      security:
        - access-token: []
        - client: []
        - uid: []
      tags:
        - Categories
      operationId: delete-category
      summary: delete-category
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            minimum: 1
          required: true
          description: the id of the category to be deleted.
      responses:
        '204':
          description: Category deleted successfully.
        '404':
          description: Category not found.
          content:
            application/json:
              example:
                {
                  "errors": {
                    "category": [
                      "Record not found"
                    ]
                  }
                }
        '401':
          description: Unauthorized.
          content:
            application/json:
              example:
                {
                  "errors": [
                    "You need to sign in or sign up before continuing."
                  ]
                }
        '403':
          description: Forbidden.
          content:
            application/json:
              example:
                {
                  "error": "You do not have permission to access this endpoint."
                }
  /autocomplete/words/:
    get:
      tags:
        - Words
      operationId: index-words
      summary: index-words
      parameters:
        - in: query
          name: q
          schema:
            type: string
          required: false
          description: prefix of the word(s).
        - in: query
          name: limit
          schema:
            type: int
          required: false
          default: 10
          description: number of words to return
      responses:
        '200':
          description: Word created successfully.
          content:
            application/json:
              example:
                {
                  "data": [
                    {
                      "id": "2",
                      "type": "word",
                      "attributes": {
                        "name": "أب",
                        "part_of_speech": "اسم"
                      },
                      "relationships": {
                        "categories": {
                          "data": [
                            {
                              "id": "2",
                              "type": "category"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "id": "4",
                      "type": "word",
                      "attributes": {
                        "name": "أحمر",
                        "part_of_speech": "اسم"
                      },
                      "relationships": {
                        "categories": {
                          "data": [
                            {
                              "id": "5",
                              "type": "category"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "id": "5",
                      "type": "word",
                      "attributes": {
                        "name": "أسود",
                        "part_of_speech": "اسم"
                      },
                      "relationships": {
                        "categories": {
                          "data": [
                            {
                              "id": "5",
                              "type": "category"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "id": "3",
                      "type": "word",
                      "attributes": {
                        "name": "أم",
                        "part_of_speech": "اسم"
                      },
                      "relationships": {
                        "categories": {
                          "data": [
                            {
                              "id": "2",
                              "type": "category"
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "included": [
                    {
                      "id": "2",
                      "type": "category",
                      "attributes": {
                        "name": "اﻷسرة"
                      },
                      "relationships": {}
                    },
                    {
                      "id": "5",
                      "type": "category",
                      "attributes": {
                        "name": "ألوان"
                      },
                      "relationships": {}
                    }
                  ]
                }
  /words/:
    post:
      security:
        - access-token: []
        - client: []
        - uid: []
      tags:
        - Words
      operationId: create-word
      summary: create-word
      requestBody:
        description: Contains word's name and array of categories
        required: true
        content:
          application/json:
            schema:
              example:
                {
                  "name": "بطة",
                  "part_of_speech": "اسم",
                  "categories": ["طيور"]
                }
      responses:
        '200':
          description: Word created successfully.
          content:
            application/json:
              example:
                {
                  "data": {
                    "id": "9",
                    "type": "word",
                    "attributes": {
                      "name": "كمبانب كللمة جديدة",
                      "part_of_speech": "حرف"
                    },
                    "relationships": {
                      "categories": {
                        "data": [
                          {
                            "id": "5",
                            "type": "category"
                          }
                        ]
                      }
                    }
                  }
                }
        '422':
          description: "Unprocessable entity: Invalid name or category."
          content:
            application/json:
              example:
                {
                  "name": [
                    "has already been taken"
                  ]
                }
        '401':
          description: Unauthorized.
          content:
            application/json:
              example:
                {
                  "errors": [
                    "You need to sign in or sign up before continuing."
                  ]
                }
        '403':
          description: Forbidden.
          content:
            application/json:
              example:
                {
                  "error": "You do not have permission to access this endpoint."
                }
    get:
      tags:
        - Words
      operationId: index-words
      summary: index-words
      parameters:
        - in: query
          name: category
          schema:
            type: string
          required: false
          description: category names (comma separated)
        - in: query
          name: q
          schema:
            type: string
          required: false
          description: prefix of the word(s).
        - in: query
          name: part_of_speech
          schema:
            type: string
          required: false
          description: parts of speech (comma separated)
        - in: query
          name: page
          schema:
            type: int
          required: false
          default: 1
          description: page number (defaults to 1)
        - in: query
          name: per_page
          schema:
            type: int
          required: false
          default: 30
          description: number of words per page (defaults to 30)
      responses:
        '200':
          description: Returns the filtered words.
          content:
            application/json:
              example:
                {
                  "data": [
                    {
                      "id": "2",
                      "type": "word",
                      "attributes": {
                        "name": "أب",
                        "part_of_speech": "اسم",
                        "categories": [
                          "اﻷسرة"
                        ]
                      }
                    },
                    {
                      "id": "3",
                      "type": "word",
                      "attributes": {
                        "name": "أم",
                        "part_of_speech": "اسم",
                        "categories": [
                          "اﻷسرة"
                        ]
                      }
                    }
                  ],
                  "page_meta": {
                    "total_count": 2,
                    "total_pages": 1
                  }
                }
  /words/{word}/:
    get:
      tags:
        - Words
      operationId: show-word
      summary: show-word
      parameters:
        - in: path
          name: word
          schema:
            type: string
          required: true
          description: word string
      responses:
        '200':
          description: Returns requested word.
          content:
            application/json:
              example:
                {
                  "data": {
                    "id": "4",
                    "type": "word",
                    "attributes": {
                      "name": "أحمر",
                      "part_of_speech": "اسم"
                    },
                    "relationships": {
                      "primary_dictionary_gesture": {
                        "data": {
                          "id": "1",
                          "type": "gesture"
                        }
                      },
                      "categories": {
                        "data": [
                          {
                            "id": "5",
                            "type": "category"
                          }
                        ]
                      }
                    }
                  },
                  "included": [
                    {
                      "id": "5",
                      "type": "category",
                      "attributes": {
                        "name": "ألوان"
                      },
                      "relationships": {}
                    },
                    {
                      "id": "1",
                      "type": "gesture",
                      "attributes": {
                        "created_at": "2019-04-14T21:04:00.713Z",
                        "video_url": "url/to/video.mp4"
                      },
                      "relationships": {
                        "review": {
                          "data": null
                        },
                        "user": {
                          "data": {
                            "id": "4",
                            "type": "user"
                          }
                        },
                        "word": {
                          "data": {
                            "id": "4",
                            "type": "word"
                          }
                        }
                      }
                    },
                    {
                      "id": "4",
                      "type": "user",
                      "attributes": {
                        "first_name": "Tarek",
                        "last_name": "Alqady",
                        "uid": "tarek@egsl.com",
                        "email": "tarek@egsl.com",
                        "city": "Alexandria",
                        "country": "Egypt",
                        "date_of_birth": "1996-03-18",
                        "gender": "male",
                        "bio": null,
                        "image": null,
                        "created_at": "2019-04-14T21:04:00.379Z"
                      }
                    }
                  ]
                }
        '404':
          description: Word not found.
          content:
            application/json:
              example:
                {
                  "errors": {
                    "word": [
                      "Record not found"
                    ]
                  }
                }
  /words/{id}/:
    delete:
      security:
        - access-token: []
        - client: []
        - uid: []
      tags:
        - Words
      operationId: delete-word
      summary: delete-word
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            minimum: 1
          required: true
          description: the id of the word to be deleted.
      responses:
        '204':
          description: Word deleted successfully.
        '404':
          description: Word not found.
          content:
            application/json:
              example:
                {
                  "errors": {
                    "word": [
                      "Record not found"
                    ]
                  }
                }
        '401':
          description: Unauthorized.
          content:
            application/json:
              example:
                {
                  "errors": [
                    "You need to sign in or sign up before continuing."
                  ]
                }
        '403':
          description: Forbidden.
          content:
            application/json:
              example:
                {
                  "error": "You do not have permission to access this endpoint."
                }
  /user/:
    get:
      security:
        - access-token: []
        - client: []
        - uid: []
      tags:
        - Users
      operationId: show-user
      summary: show-user
      responses:
        '200':
          description: Returns current user.
          content:
            application/json:
              example:
                {
                  "data": {
                    "id": "4",
                    "type": "user",
                    "attributes": {
                      "first_name": "Tarek",
                      "last_name": "Alqady",
                      "uid": "tarek@egsl.com",
                      "email": "tarek@egsl.com",
                      "city": "Alexandria",
                      "country": "Egypt",
                      "type": "User",
                      "date_of_birth": "1996-03-18",
                      "gender": "male",
                      "bio": null,
                      "image": null,
                      "created_at": "2019-05-14T22:56:45.206Z",
                      "accepted_contributions_count": 0,
                      "rejected_contributions_count": 1,
                      "pending_contributions_count": 1,
                      "reviews_count": 0,
                      "provider": "email"
                    }
                  }
                }
  /user/contributions/:
    get:
      security:
        - access-token: []
        - client: []
        - uid: []
      tags:
        - Users
      operationId: show-user-contributions
      summary: show-user-contributions
      responses:
        '200':
          description: Returns current user's contributions, including their respective reviews, words and categories.
          content:
            application/json:
              example:
                {
                  "data": [
                    {
                      "id": "1",
                      "type": "gesture",
                      "attributes": {
                        "created_at": "2019-04-11T22:16:06.207Z",
                        "video_url": "url/to/video.mp4",
                        "preview_url": "url/to/video.mp4"
                      },
                      "relationships": {
                        "user": {
                          "data": {
                            "id": "4",
                            "type": "user"
                          }
                        },
                        "word": {
                          "data": {
                            "id": "4",
                            "type": "word"
                          }
                        }
                      }
                    },
                  ],
                  "included": [
                    {
                      "id": "4",
                      "type": "word",
                      "attributes": {
                        "name": "أحمر",
                        "part_of_speech": "اسم"
                      },
                      "relationships": {
                        "categories": {
                          "data": [
                            {
                              "id": "5",
                              "type": "category"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "id": "5",
                      "type": "category",
                      "attributes": {
                        "name": "ألوان"
                      },
                      "relationships": {}
                    },
                    {
                      "id": "1",
                      "type": "review",
                      "attributes": {
                        "accepted": false,
                        "comment": "Tarek is too cute.",
                        "created_at": "2019-04-11T22:16:06.743Z"
                      },
                      "relationships": {
                        "reviewer": {
                          "data": {
                            "id": "3",
                            "type": "reviewer"
                          }
                        },
                        "gesture": {
                          "data": {
                            "id": "2",
                            "type": "gesture"
                          }
                        }
                      }
                    }
                  ],
                  "page_meta": {
                    "total_count": 1,
                    "total_pages": 1
                  }
                }
components:
  securitySchemes:
    access-token:
      type: apiKey
      in: header
      name: access-token
      description: Access token string
    client:
      type: apiKey
      in: header
      name: client
      description: Info about API client
    uid:
      type: apiKey
      in: header
      name: uid
      description: User identifier (email or omniauth token)
